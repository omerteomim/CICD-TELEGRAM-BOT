name: Deploy Lambda to AWS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies and zip Lambda function
      run: |
        pip install requests
        mkdir -p package
        cp lambda_function.py package/
        pip install -t package/ requests
        cd package
        zip -r ../lambda_function.zip .
        cd ..
    
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.0.0
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Terraform Init
      run: terraform init
      
    - name: Terraform Validate
      run: terraform validate
    
    - name: Terraform Plan
      run: |
        terraform plan \
          -var="telegram_token=${{ secrets.TELEGRAM_TOKEN }}" \
          -var="telegram_chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
          -var="aws_region=${{ secrets.AWS_REGION }}"
          -var="s3_bucket=${{ secrets.AWS_S3 }}"
    
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      run: |
        terraform apply -auto-approve \
          -var="telegram_token=${{ secrets.TELEGRAM_TOKEN }}" \
          -var="telegram_chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
          -var="aws_region=${{ secrets.AWS_REGION }}"
          -var="s3_bucket=${{ secrets.AWS_S3 }}"
    
    - name: Get function URL and set webhook
      if: github.ref == 'refs/heads/main'
      run: |
        FUNCTION_URL=$(terraform output function_url | grep -Eo 'https://[^"]+' | head -n 1)
        echo "Function URL: $FUNCTION_URL"
        echo "Setting Telegram webhook..."
        
        # Add verbose output for debugging
        WEBHOOK_RESPONSE=$(curl -v "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/setWebhook?url=${FUNCTION_URL}&drop_pending_updates=true")
        
        echo "Webhook response: $WEBHOOK_RESPONSE"
        
        # Display setup instructions if automatic setup fails
        echo "If webhook setup failed, manually set it with:"
        echo "curl -X POST https://api.telegram.org/bot<YOUR_TOKEN>/setWebhook?url=$FUNCTION_URL"
        
        # Verify webhook info
        echo "Verifying webhook info..."
        curl --request GET \
          --url "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/getWebhookInfo"